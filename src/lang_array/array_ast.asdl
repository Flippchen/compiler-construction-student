module LangArray
{

    exp =
          IntConst(int value)
        | BoolConst(bool value)
        | Name(ident var)
        | Call(ident var, exp* args)            -- print, input_int, len
        | UnOp(unaryop op, exp arg)
        | BinOp(exp left, binaryop op, exp right)
        | ArrayInitDyn(exp len, exp elemInit)   -- 5 * [0]
        | ArrayInitStatic(exp* elemInit)        -- [1,2,3]
        | Subscript(exp array, exp index)       -- x[1]
        attributes(resultTy? ty)

    stmt =
        StmtExp(exp)
        | Assign(ident var, exp right)
        | IfStmt(exp cond, stmt* thenBody, stmt* elseBody)
        | WhileStmt(exp cond, stmt* body)
        | SubscriptAssign(exp left, exp index, exp right)   -- x[1][2] = ...

    mod = Module(stmt* stmts)
}
